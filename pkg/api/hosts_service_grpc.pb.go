// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: hosts_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HostnameService_SetHostname_FullMethodName     = "/prto.HostnameService/SetHostname"
	HostnameService_ListDNSServers_FullMethodName  = "/prto.HostnameService/ListDNSServers"
	HostnameService_AddDNSServer_FullMethodName    = "/prto.HostnameService/AddDNSServer"
	HostnameService_RemoveDNSServer_FullMethodName = "/prto.HostnameService/RemoveDNSServer"
)

// HostnameServiceClient is the client API for HostnameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostnameServiceClient interface {
	SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponce, error)
	ListDNSServers(ctx context.Context, in *ListDNSServersRequest, opts ...grpc.CallOption) (*ListDNSServersResponce, error)
	AddDNSServer(ctx context.Context, in *AddDNSServerRequest, opts ...grpc.CallOption) (*AddDNSServerResponce, error)
	RemoveDNSServer(ctx context.Context, in *RemoveDNSServerRequest, opts ...grpc.CallOption) (*RemoveDNSServerResponce, error)
}

type hostnameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostnameServiceClient(cc grpc.ClientConnInterface) HostnameServiceClient {
	return &hostnameServiceClient{cc}
}

func (c *hostnameServiceClient) SetHostname(ctx context.Context, in *SetHostnameRequest, opts ...grpc.CallOption) (*SetHostnameResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostnameResponce)
	err := c.cc.Invoke(ctx, HostnameService_SetHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostnameServiceClient) ListDNSServers(ctx context.Context, in *ListDNSServersRequest, opts ...grpc.CallOption) (*ListDNSServersResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDNSServersResponce)
	err := c.cc.Invoke(ctx, HostnameService_ListDNSServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostnameServiceClient) AddDNSServer(ctx context.Context, in *AddDNSServerRequest, opts ...grpc.CallOption) (*AddDNSServerResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDNSServerResponce)
	err := c.cc.Invoke(ctx, HostnameService_AddDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostnameServiceClient) RemoveDNSServer(ctx context.Context, in *RemoveDNSServerRequest, opts ...grpc.CallOption) (*RemoveDNSServerResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDNSServerResponce)
	err := c.cc.Invoke(ctx, HostnameService_RemoveDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostnameServiceServer is the server API for HostnameService service.
// All implementations must embed UnimplementedHostnameServiceServer
// for forward compatibility
type HostnameServiceServer interface {
	SetHostname(context.Context, *SetHostnameRequest) (*SetHostnameResponce, error)
	ListDNSServers(context.Context, *ListDNSServersRequest) (*ListDNSServersResponce, error)
	AddDNSServer(context.Context, *AddDNSServerRequest) (*AddDNSServerResponce, error)
	RemoveDNSServer(context.Context, *RemoveDNSServerRequest) (*RemoveDNSServerResponce, error)
	mustEmbedUnimplementedHostnameServiceServer()
}

// UnimplementedHostnameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostnameServiceServer struct {
}

func (UnimplementedHostnameServiceServer) SetHostname(context.Context, *SetHostnameRequest) (*SetHostnameResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostname not implemented")
}
func (UnimplementedHostnameServiceServer) ListDNSServers(context.Context, *ListDNSServersRequest) (*ListDNSServersResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNSServers not implemented")
}
func (UnimplementedHostnameServiceServer) AddDNSServer(context.Context, *AddDNSServerRequest) (*AddDNSServerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNSServer not implemented")
}
func (UnimplementedHostnameServiceServer) RemoveDNSServer(context.Context, *RemoveDNSServerRequest) (*RemoveDNSServerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDNSServer not implemented")
}
func (UnimplementedHostnameServiceServer) mustEmbedUnimplementedHostnameServiceServer() {}

// UnsafeHostnameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostnameServiceServer will
// result in compilation errors.
type UnsafeHostnameServiceServer interface {
	mustEmbedUnimplementedHostnameServiceServer()
}

func RegisterHostnameServiceServer(s grpc.ServiceRegistrar, srv HostnameServiceServer) {
	s.RegisterService(&HostnameService_ServiceDesc, srv)
}

func _HostnameService_SetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameServiceServer).SetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostnameService_SetHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameServiceServer).SetHostname(ctx, req.(*SetHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostnameService_ListDNSServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameServiceServer).ListDNSServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostnameService_ListDNSServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameServiceServer).ListDNSServers(ctx, req.(*ListDNSServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostnameService_AddDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameServiceServer).AddDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostnameService_AddDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameServiceServer).AddDNSServer(ctx, req.(*AddDNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostnameService_RemoveDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnameServiceServer).RemoveDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostnameService_RemoveDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnameServiceServer).RemoveDNSServer(ctx, req.(*RemoveDNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostnameService_ServiceDesc is the grpc.ServiceDesc for HostnameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostnameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prto.HostnameService",
	HandlerType: (*HostnameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHostname",
			Handler:    _HostnameService_SetHostname_Handler,
		},
		{
			MethodName: "ListDNSServers",
			Handler:    _HostnameService_ListDNSServers_Handler,
		},
		{
			MethodName: "AddDNSServer",
			Handler:    _HostnameService_AddDNSServer_Handler,
		},
		{
			MethodName: "RemoveDNSServer",
			Handler:    _HostnameService_RemoveDNSServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hosts_service.proto",
}
